#![cfg(test)]
use sbolt::types::result;
sbolt::include_views!();

#[test]
fn default_view() -> result::RenderResult<()> {
    let result = lib_it_op_views::render("views/default", &mut sbolt::context!())?;
    let expected =
        r#"<html><head><title>Default</title></head><body><div>Hello Default!</div></body></html>"#;
    assert_eq!(result.trim(), expected);

    Ok(())
}

#[test]
fn sub_index_view() -> result::RenderResult<()> {
    let mut context = sbolt::context! {
        name: "sbolt".to_string(),
        age: 1,
        msg: "Welcome!".to_string()
    };
    let result = lib_it_op_views::render("views/sub/index", &mut context)?;
    let expected = "<html><head><title>Welcome</title></head><body><div>Welcome! - from sbolt(1)</div></body></html>";
    assert_eq!(result, expected);

    Ok(())
}

#[test]
fn sub_home_view() -> result::RenderResult<()> {
    let result = lib_it_op_views::render("views/sub/home", &mut sbolt::context!())?;
    // note: \n is generated by runtime which build stage doen't have context.
    let expected = "<html><head>\n  <title>Home</title></head><body><div class=\"menu\"><ul><li>menu 1</li><li>menu 2</li><li>menu 3</li></ul></div><div class=\"main\"><div>Hello world!<div></div><div class=\"footer\">\n    this is footer\n</div></body></html>";
    assert_eq!(result, expected);

    Ok(())
}
